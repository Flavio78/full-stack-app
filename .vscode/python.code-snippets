{
	// Place your Area di lavoro DataScience snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"print_format": {
		"prefix": "printfmt",
		"body": "print(f\"${1:message}:\\n{${2:object}}\")",
		"description": "Code snippet for print with formatted string and object"
	},
	"print_object": {
		"prefix": "printobj",
		"body": "print(f\"${1:object}: {${1:object}}\")",
		"description": "Code snippet for print object"
	},
	"print_array": {
		"prefix": "printarr",
		"body": "print(\"${1:object}:\", *${1:object}, sep=\"\\n\")",
		"description": "Code snippet for print array"
	},
	"main_function": {
		"prefix": "mainfunc",
		"body": [
			"#!/usr/bin/python3\n",
			"\"\"\"test example",
			"\"\"\"\n",
			"import sys\n\n",
			"def main() -> None:",
			"\t\"\"\"Main function\n",
			"\tArgs",
			"\t\tNone: this function requires no value\n",
			"\tReturns",
			"\t\tNone: this function returns no value",
			"\t\"\"\"",
			"\tprint(\"Start of program\")",
			"\n\tif len(sys.argv) > 1:",
			"\t\tprint(f\"First argument: {sys.argv[1]}\")",
			"\t# +++your code here+++\n\t${0}",
			"\n\tprint(\"End of program\")\n\n",
			"if __name__ == \"__main__\":",
			"\tmain()\n"
		],
		"description": "Code snippet for skeleton of main function"
	},
	"def_function": {
		"prefix": "deffunc",
		"body": [
			"def ${1:name}() -> None:",
			"\t\"\"\"${2:short_description}\n",
			"\tArgs",
			"\t\tNone: function requires no value\n",
			"\tReturns",
			"\t\tNone: function returns no value",
			"\t\"\"\"",
			"\tprint(\"Start of function '${1:name}'\")",
			"\n\t# +++your code here+++\n\t${0}",
			"\n\tprint(\"End of function '${1:name}'\")\n\n",
		],
		"description": "Code snippet for skeleton of a python function"
	},
	"def_decorator": {
		"prefix": "defdec",
		"body": [
			"def ${1: decorator_name}(func):"
			"\t\"\"\"${2:decorator description}\n",
			"\t\"\"\"",
			"\t# Define the wrapper function to return."
			"\t@wraps(func)",
			"\tdef wrapper(*args, **kwargs):"
			"\t\t# When wrapper is called"
			"\t\t# +++your code here+++",
			"\t\tprint(\"args:\", *${args}, sep=\"\\n\")"
			"\t\tprint(\"kwargs:\", *${kwargs}, sep=\"\\n\")"
			"\t\tprint(\"func:\", *${func}, sep=\"\\n\")"
			"\treturn wrapper"
		]
	}
}